#include <iostream>

//비트 마스킹이 생각보다 dp에서 많이 사용 되구나..
//특히 0~9 사이 숫자들 장난치는건 거의다 비트마스킹으로 풀리네..

using namespace std;
int dp[105][12][1027] = {0};
int main()
{
    int n;
    int i, j;
    cin >> n;
    //가장 높은 자리수를 기준으로 dp구성.
    for (j = 0; j <= 9; j++)
    {
        dp[1][j][1<<j] = 1;
    }
    for (i = 2; i <= n; i++)
    {
        //0,9
        for (int j = 0; j <= 1023; j++)
        {
            dp[i][0][(1<<0)|j]+= dp[i - 1][1][j];
            if (dp[i][0][1 | j] >= 1000000000)
                dp[i][0][(1<<0) | j] = dp[i][0][(1<<0) | j] % 1000000000;
            dp[i][9][(1<<9)|j]+= dp[i - 1][8][j];
            if (dp[i][9][(1<<9) | j] >= 1000000000)
                dp[i][9][(1<<9) | j] = dp[i][9][(1<<9) | j] % 1000000000;
        }
        //1~8
        for (j = 1; j <= 8; j++)
        {
            for (int k = 0; k <= 1023; k++)
            {
                dp[i][j][(1<<j)|k]+= dp[i - 1][j + 1][k];
                if (dp[i][j][(1 << j) | k] >= 1000000000)
                    dp[i][j][(1 << j) | k] = dp[i][j][(1 << j) | k] % 1000000000;
                dp[i][j][(1 << j)|k]+= dp[i - 1][j - 1][k];
                if (dp[i][j][(1<<j)|k] >= 1000000000)
                    dp[i][j][(1 << j)|k] = dp[i][j][(1 << j)|k] % 1000000000;
            }
        }
    }
    long long sum = 0;
    for (int i = 1; i <= 9; i++)
    {
        sum += dp[n][i][1023];
        if (sum >= 1000000000)
            sum = sum % 1000000000;
    }
    cout << sum;
    return 0;
}